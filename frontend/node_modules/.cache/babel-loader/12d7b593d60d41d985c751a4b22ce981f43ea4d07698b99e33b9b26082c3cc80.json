{"ast":null,"code":"var _jsxFileName = \"G:\\\\repositories\\\\chat-app-starter\\\\frontend\\\\src\\\\components\\\\ChatWindow.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { getMessages, sendMessage } from '../api/messages';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { useAuth } from '../context/AuthContext';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/chatwindow.css';\nimport '../styles/auth.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatWindow({\n  chatId\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [text, setText] = useState('');\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    if (user && chatId) {\n      getMessages(chatId).then(setMessages).catch(err => {\n        toast.error(err.message || 'Failed to fetch messages');\n        console.error(err);\n      });\n    } else {\n      setMessages([]); // Clear messages when logged out\n    }\n  }, [chatId, user]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const trimmed = text.trim();\n    if (!trimmed || !user) return;\n    try {\n      await sendMessage(chatId, trimmed);\n      toast.success('Message sent!');\n      setText('');\n      const updatedMessages = await getMessages(chatId);\n      setMessages(updatedMessages);\n\n      // Wait for bot response\n      setTimeout(async () => {\n        try {\n          const finalMessages = await getMessages(chatId);\n          setMessages(finalMessages);\n        } catch (err) {\n          console.error('Failed to fetch updated messages:', err);\n        }\n      }, 3500);\n    } catch (err) {\n      toast.error(err.message || 'Failed to send message');\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message-wrapper ${message.sender === 'bot' ? 'bot' : 'user'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${message.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-time ${message.sender}`,\n          children: new Date(message.createdAt).toLocaleString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), user && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"chat-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatWindow, \"v85BOAwNMMXgdEPMmEQEU5VRagY=\", false, function () {\n  return [useAuth];\n});\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["useEffect","useState","getMessages","sendMessage","toast","ToastContainer","useAuth","jsxDEV","_jsxDEV","ChatWindow","chatId","_s","messages","setMessages","text","setText","user","then","catch","err","error","message","console","handleSubmit","e","preventDefault","trimmed","trim","success","updatedMessages","setTimeout","finalMessages","className","children","map","i","sender","fileName","_jsxFileName","lineNumber","columnNumber","Date","createdAt","toLocaleString","year","month","day","hour","minute","onSubmit","value","onChange","target","placeholder","type","_c","$RefreshReg$"],"sources":["G:/repositories/chat-app-starter/frontend/src/components/ChatWindow.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { getMessages, sendMessage } from '../api/messages';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { useAuth } from '../context/AuthContext';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/chatwindow.css';\nimport '../styles/auth.css';\n\nfunction ChatWindow({ chatId }) {\n    const [messages, setMessages] = useState([]);\n    const [text, setText] = useState('');\n    const { user } = useAuth();\n\n    useEffect(() => {\n        if (user && chatId) {\n            getMessages(chatId)\n                .then(setMessages)\n                .catch((err) => {\n                    toast.error(err.message || 'Failed to fetch messages');\n                    console.error(err);\n                });\n        } else {\n            setMessages([]); // Clear messages when logged out\n        }\n    }, [chatId, user]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const trimmed = text.trim();\n        if (!trimmed || !user) return;\n\n        try {\n            await sendMessage(chatId, trimmed);\n            toast.success('Message sent!');\n            setText('');\n            const updatedMessages = await getMessages(chatId);\n            setMessages(updatedMessages);\n\n            // Wait for bot response\n            setTimeout(async () => {\n                try {\n                    const finalMessages = await getMessages(chatId);\n                    setMessages(finalMessages);\n                } catch (err) {\n                    console.error('Failed to fetch updated messages:', err);\n                }\n            }, 3500);\n        } catch (err) {\n            toast.error(err.message || 'Failed to send message');\n            console.error(err);\n        }\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-messages\">\n                {messages.map((message, i) => (\n                    <div\n                        key={i}\n                        className={`chat-message-wrapper ${message.sender === 'bot' ? 'bot' : 'user'}`}\n                    >\n                        <div className={`chat-message ${message.sender}`}>\n                            <div className=\"message-text\">{message.text}</div>\n                        </div>\n                        <div className={`message-time ${message.sender}`}>\n                            {new Date(message.createdAt).toLocaleString('en-US', {\n                                year: 'numeric',\n                                month: 'short',\n                                day: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit',\n                            })}\n                        </div>\n                    </div>\n                ))}\n            </div>\n\n            {user && (\n                <form onSubmit={handleSubmit} className=\"chat-input-area\">\n                    <input\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        placeholder=\"Type your message...\"\n                    />\n                    <button type=\"submit\">Send</button>\n                </form>\n            )}\n\n            <ToastContainer />\n        </div>\n    );\n}\n\nexport default ChatWindow;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,iBAAiB;AAC1D,SAASC,KAAK,EAAEC,cAAc,QAAQ,gBAAgB;AACtD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,OAAO,uCAAuC;AAC9C,OAAO,0BAA0B;AACjC,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,UAAUA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM;IAAEe;EAAK,CAAC,GAAGV,OAAO,CAAC,CAAC;EAE1BN,SAAS,CAAC,MAAM;IACZ,IAAIgB,IAAI,IAAIN,MAAM,EAAE;MAChBR,WAAW,CAACQ,MAAM,CAAC,CACdO,IAAI,CAACJ,WAAW,CAAC,CACjBK,KAAK,CAAEC,GAAG,IAAK;QACZf,KAAK,CAACgB,KAAK,CAACD,GAAG,CAACE,OAAO,IAAI,0BAA0B,CAAC;QACtDC,OAAO,CAACF,KAAK,CAACD,GAAG,CAAC;MACtB,CAAC,CAAC;IACV,CAAC,MAAM;MACHN,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACrB;EACJ,CAAC,EAAE,CAACH,MAAM,EAAEM,IAAI,CAAC,CAAC;EAElB,MAAMO,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,OAAO,GAAGZ,IAAI,CAACa,IAAI,CAAC,CAAC;IAC3B,IAAI,CAACD,OAAO,IAAI,CAACV,IAAI,EAAE;IAEvB,IAAI;MACA,MAAMb,WAAW,CAACO,MAAM,EAAEgB,OAAO,CAAC;MAClCtB,KAAK,CAACwB,OAAO,CAAC,eAAe,CAAC;MAC9Bb,OAAO,CAAC,EAAE,CAAC;MACX,MAAMc,eAAe,GAAG,MAAM3B,WAAW,CAACQ,MAAM,CAAC;MACjDG,WAAW,CAACgB,eAAe,CAAC;;MAE5B;MACAC,UAAU,CAAC,YAAY;QACnB,IAAI;UACA,MAAMC,aAAa,GAAG,MAAM7B,WAAW,CAACQ,MAAM,CAAC;UAC/CG,WAAW,CAACkB,aAAa,CAAC;QAC9B,CAAC,CAAC,OAAOZ,GAAG,EAAE;UACVG,OAAO,CAACF,KAAK,CAAC,mCAAmC,EAAED,GAAG,CAAC;QAC3D;MACJ,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,CAAC,OAAOA,GAAG,EAAE;MACVf,KAAK,CAACgB,KAAK,CAACD,GAAG,CAACE,OAAO,IAAI,wBAAwB,CAAC;MACpDC,OAAO,CAACF,KAAK,CAACD,GAAG,CAAC;IACtB;EACJ,CAAC;EAED,oBACIX,OAAA;IAAKwB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3BzB,OAAA;MAAKwB,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzBrB,QAAQ,CAACsB,GAAG,CAAC,CAACb,OAAO,EAAEc,CAAC,kBACrB3B,OAAA;QAEIwB,SAAS,EAAE,wBAAwBX,OAAO,CAACe,MAAM,KAAK,KAAK,GAAG,KAAK,GAAG,MAAM,EAAG;QAAAH,QAAA,gBAE/EzB,OAAA;UAAKwB,SAAS,EAAE,gBAAgBX,OAAO,CAACe,MAAM,EAAG;UAAAH,QAAA,eAC7CzB,OAAA;YAAKwB,SAAS,EAAC,cAAc;YAAAC,QAAA,EAAEZ,OAAO,CAACP;UAAI;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC,eACNhC,OAAA;UAAKwB,SAAS,EAAE,gBAAgBX,OAAO,CAACe,MAAM,EAAG;UAAAH,QAAA,EAC5C,IAAIQ,IAAI,CAACpB,OAAO,CAACqB,SAAS,CAAC,CAACC,cAAc,CAAC,OAAO,EAAE;YACjDC,IAAI,EAAE,SAAS;YACfC,KAAK,EAAE,OAAO;YACdC,GAAG,EAAE,SAAS;YACdC,IAAI,EAAE,SAAS;YACfC,MAAM,EAAE;UACZ,CAAC;QAAC;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA,GAdDL,CAAC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAeL,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAELxB,IAAI,iBACDR,OAAA;MAAMyC,QAAQ,EAAE1B,YAAa;MAACS,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBACrDzB,OAAA;QACI0C,KAAK,EAAEpC,IAAK;QACZqC,QAAQ,EAAG3B,CAAC,IAAKT,OAAO,CAACS,CAAC,CAAC4B,MAAM,CAACF,KAAK,CAAE;QACzCG,WAAW,EAAC;MAAsB;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACFhC,OAAA;QAAQ8C,IAAI,EAAC,QAAQ;QAAArB,QAAA,EAAC;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CACT,eAEDhC,OAAA,CAACH,cAAc;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEd;AAAC7B,EAAA,CAnFQF,UAAU;EAAA,QAGEH,OAAO;AAAA;AAAAiD,EAAA,GAHnB9C,UAAU;AAqFnB,eAAeA,UAAU;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}