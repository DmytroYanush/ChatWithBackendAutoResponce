{"ast":null,"code":"const API_URL = 'http://localhost:5000/api/messages';\nexport async function getMessages(chatId) {\n  const res = await fetch(`${API_URL}/${chatId}`);\n  if (!res.ok) {\n    throw new Error('Failed to fetch messages');\n  }\n  return res.json();\n}\nexport async function sendMessage(chatId, text, sender) {\n  const res = await fetch(`${API_URL}/${chatId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      text,\n      sender\n    })\n  });\n  if (!res.ok) {\n    const errData = await res.json().catch(() => ({}));\n    throw new Error(errData.message || 'Failed to send message');\n  }\n  return res.json();\n}\nexport async function updateMessage(messageId, text, sender) {\n  const res = await fetch(`${API_URL}/update/${messageId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      text,\n      sender\n    })\n  });\n  if (!res.ok) {\n    const errData = await res.json().catch(() => ({}));\n    throw new Error(errData.message || 'Failed to update message');\n  }\n  return res.json();\n}","map":{"version":3,"names":["API_URL","getMessages","chatId","res","fetch","ok","Error","json","sendMessage","text","sender","method","headers","body","JSON","stringify","errData","catch","message","updateMessage","messageId"],"sources":["G:/repositories/chat-app-starter/frontend/src/api/messages.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api/messages';\r\n\r\nexport async function getMessages(chatId) {\r\n  const res = await fetch(`${API_URL}/${chatId}`);\r\n  if (!res.ok) {\r\n    throw new Error('Failed to fetch messages');\r\n  }\r\n  return res.json();\r\n}\r\n\r\nexport async function sendMessage(chatId, text, sender) {\r\n  const res = await fetch(`${API_URL}/${chatId}`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ text, sender }),\r\n  });\r\n\r\n  if (!res.ok) {\r\n    const errData = await res.json().catch(() => ({}));\r\n    throw new Error(errData.message || 'Failed to send message');\r\n  }\r\n\r\n  return res.json();\r\n}\r\n\r\nexport async function updateMessage(messageId, text, sender) {\r\n  const res = await fetch(`${API_URL}/update/${messageId}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ text, sender }),\r\n  });\r\n  if (!res.ok) {\r\n    const errData = await res.json().catch(() => ({}));\r\n    throw new Error(errData.message || 'Failed to update message');\r\n  }\r\n  return res.json();\r\n}\r\n\r\n\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,oCAAoC;AAEpD,OAAO,eAAeC,WAAWA,CAACC,MAAM,EAAE;EACxC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,IAAIE,MAAM,EAAE,CAAC;EAC/C,IAAI,CAACC,GAAG,CAACE,EAAE,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EACA,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeC,WAAWA,CAACN,MAAM,EAAEO,IAAI,EAAEC,MAAM,EAAE;EACtD,MAAMP,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,IAAIE,MAAM,EAAE,EAAE;IAC9CS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,IAAI;MAAEC;IAAO,CAAC;EACvC,CAAC,CAAC;EAEF,IAAI,CAACP,GAAG,CAACE,EAAE,EAAE;IACX,MAAMW,OAAO,GAAG,MAAMb,GAAG,CAACI,IAAI,CAAC,CAAC,CAACU,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAClD,MAAM,IAAIX,KAAK,CAACU,OAAO,CAACE,OAAO,IAAI,wBAAwB,CAAC;EAC9D;EAEA,OAAOf,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeY,aAAaA,CAACC,SAAS,EAAEX,IAAI,EAAEC,MAAM,EAAE;EAC3D,MAAMP,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,WAAWoB,SAAS,EAAE,EAAE;IACxDT,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,IAAI;MAAEC;IAAO,CAAC;EACvC,CAAC,CAAC;EACF,IAAI,CAACP,GAAG,CAACE,EAAE,EAAE;IACX,MAAMW,OAAO,GAAG,MAAMb,GAAG,CAACI,IAAI,CAAC,CAAC,CAACU,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAClD,MAAM,IAAIX,KAAK,CAACU,OAAO,CAACE,OAAO,IAAI,0BAA0B,CAAC;EAChE;EACA,OAAOf,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}