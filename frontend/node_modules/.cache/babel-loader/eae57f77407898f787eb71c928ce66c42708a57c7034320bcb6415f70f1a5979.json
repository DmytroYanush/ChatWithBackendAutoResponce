{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\nexport const getMessages = async chatId => {\n  const response = await fetch(`${API_URL}/messages/${chatId}`, {\n    headers: {\n      ...getAuthHeader()\n    }\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch messages');\n  }\n  return response.json();\n};\nexport const sendMessage = async (chatId, text) => {\n  const response = await fetch(`${API_URL}/messages/${chatId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      ...getAuthHeader()\n    },\n    body: JSON.stringify({\n      text\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to send message');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getAuthHeader","token","localStorage","getItem","Authorization","getMessages","chatId","response","fetch","headers","ok","error","json","Error","sendMessage","text","method","body","JSON","stringify"],"sources":["G:/repositories/chat-app-starter/frontend/src/api/messages.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  return token ? { Authorization: `Bearer ${token}` } : {};\n};\n\nexport const getMessages = async (chatId) => {\n  const response = await fetch(`${API_URL}/messages/${chatId}`, {\n    headers: {\n      ...getAuthHeader(),\n    },\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch messages');\n  }\n\n  return response.json();\n};\n\nexport const sendMessage = async (chatId, text) => {\n  const response = await fetch(`${API_URL}/messages/${chatId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      ...getAuthHeader(),\n    },\n    body: JSON.stringify({ text }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to send message');\n  }\n\n  return response.json();\n};\n\n\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOF,KAAK,GAAG;IAAEG,aAAa,EAAE,UAAUH,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;AAED,OAAO,MAAMI,WAAW,GAAG,MAAOC,MAAM,IAAK;EAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,OAAO,aAAaU,MAAM,EAAE,EAAE;IAC5DG,OAAO,EAAE;MACP,GAAGT,aAAa,CAAC;IACnB;EACF,CAAC,CAAC;EAEF,IAAI,CAACO,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,0BAA0B,CAAC;EAC5D;EAEA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAOR,MAAM,EAAES,IAAI,KAAK;EACjD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,OAAO,aAAaU,MAAM,EAAE,EAAE;IAC5DU,MAAM,EAAE,MAAM;IACdP,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGT,aAAa,CAAC;IACnB,CAAC;IACDiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEJ;IAAK,CAAC;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACR,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,wBAAwB,CAAC;EAC1D;EAEA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}