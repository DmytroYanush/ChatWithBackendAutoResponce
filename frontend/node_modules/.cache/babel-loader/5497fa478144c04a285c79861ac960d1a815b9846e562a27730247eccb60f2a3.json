{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\nexport const getChats = async () => {\n  const response = await fetch(`${API_URL}/chats`, {\n    headers: {\n      ...getAuthHeader()\n    }\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch chats');\n  }\n  return response.json();\n};\nexport const createChat = async chatData => {\n  const response = await fetch(`${API_URL}/chats`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      ...getAuthHeader()\n    },\n    body: JSON.stringify(chatData)\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create chat');\n  }\n  return response.json();\n};\nexport const updateChat = async (chatId, chatData) => {\n  const response = await fetch(`${API_URL}/chats/${chatId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      ...getAuthHeader()\n    },\n    body: JSON.stringify(chatData)\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to update chat');\n  }\n  return response.json();\n};\nexport const deleteChat = async chatId => {\n  const response = await fetch(`${API_URL}/chats/${chatId}`, {\n    method: 'DELETE',\n    headers: {\n      ...getAuthHeader()\n    }\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to delete chat');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getAuthHeader","token","localStorage","getItem","Authorization","getChats","response","fetch","headers","ok","error","json","Error","createChat","chatData","method","body","JSON","stringify","updateChat","chatId","deleteChat"],"sources":["G:/repositories/chat-app-starter/frontend/src/api/chats.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst getAuthHeader = () => {\r\n  const token = localStorage.getItem('token');\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\nexport const getChats = async () => {\r\n  const response = await fetch(`${API_URL}/chats`, {\r\n    headers: {\r\n      ...getAuthHeader(),\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.error || 'Failed to fetch chats');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const createChat = async (chatData) => {\r\n  const response = await fetch(`${API_URL}/chats`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...getAuthHeader(),\r\n    },\r\n    body: JSON.stringify(chatData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.error || 'Failed to create chat');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const updateChat = async (chatId, chatData) => {\r\n  const response = await fetch(`${API_URL}/chats/${chatId}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...getAuthHeader(),\r\n    },\r\n    body: JSON.stringify(chatData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.error || 'Failed to update chat');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const deleteChat = async (chatId) => {\r\n  const response = await fetch(`${API_URL}/chats/${chatId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      ...getAuthHeader(),\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.error || 'Failed to delete chat');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOF,KAAK,GAAG;IAAEG,aAAa,EAAE,UAAUH,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;AAED,OAAO,MAAMI,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,QAAQ,EAAE;IAC/CY,OAAO,EAAE;MACP,GAAGR,aAAa,CAAC;IACnB;EACF,CAAC,CAAC;EAEF,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,uBAAuB,CAAC;EACzD;EAEA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,QAAQ,EAAE;IAC/CmB,MAAM,EAAE,MAAM;IACdP,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGR,aAAa,CAAC;IACnB,CAAC;IACDgB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACR,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,uBAAuB,CAAC;EACzD;EAEA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEN,QAAQ,KAAK;EACpD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,UAAUwB,MAAM,EAAE,EAAE;IACzDL,MAAM,EAAE,KAAK;IACbP,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGR,aAAa,CAAC;IACnB,CAAC;IACDgB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACR,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,uBAAuB,CAAC;EACzD;EAEA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMU,UAAU,GAAG,MAAOD,MAAM,IAAK;EAC1C,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,UAAUwB,MAAM,EAAE,EAAE;IACzDL,MAAM,EAAE,QAAQ;IAChBP,OAAO,EAAE;MACP,GAAGR,aAAa,CAAC;IACnB;EACF,CAAC,CAAC;EAEF,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,uBAAuB,CAAC;EACzD;EAEA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}