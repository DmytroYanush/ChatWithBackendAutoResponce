{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst getAuthHeader = async () => {\n  const user = auth.currentUser;\n  if (!user) return {};\n  const token = await user.getIdToken();\n  return {\n    Authorization: `Bearer ${token}`\n  };\n};\nexport const getMessages = async chatId => {\n  const headers = await getAuthHeader();\n  const response = await fetch(`${API_URL}/messages/${chatId}`, {\n    headers\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch messages');\n  }\n  return response.json();\n};\nexport const sendMessage = async (chatId, text) => {\n  const headers = await getAuthHeader();\n  const response = await fetch(`${API_URL}/messages/${chatId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers\n    },\n    body: JSON.stringify({\n      text\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to send message');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getAuthHeader","user","auth","currentUser","token","getIdToken","Authorization","getMessages","chatId","headers","response","fetch","ok","error","json","Error","sendMessage","text","method","body","JSON","stringify"],"sources":["G:/repositories/chat-app-starter/frontend/src/api/messages.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst getAuthHeader = async () => {\n  const user = auth.currentUser;\n  if (!user) return {};\n  \n  const token = await user.getIdToken();\n  return { Authorization: `Bearer ${token}` };\n};\n\nexport const getMessages = async (chatId) => {\n  const headers = await getAuthHeader();\n  const response = await fetch(`${API_URL}/messages/${chatId}`, {\n    headers,\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch messages');\n  }\n\n  return response.json();\n};\n\nexport const sendMessage = async (chatId, text) => {\n  const headers = await getAuthHeader();\n  const response = await fetch(`${API_URL}/messages/${chatId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    body: JSON.stringify({ text }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to send message');\n  }\n\n  return response.json();\n};\n\n\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMC,IAAI,GAAGC,IAAI,CAACC,WAAW;EAC7B,IAAI,CAACF,IAAI,EAAE,OAAO,CAAC,CAAC;EAEpB,MAAMG,KAAK,GAAG,MAAMH,IAAI,CAACI,UAAU,CAAC,CAAC;EACrC,OAAO;IAAEC,aAAa,EAAE,UAAUF,KAAK;EAAG,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG,MAAOC,MAAM,IAAK;EAC3C,MAAMC,OAAO,GAAG,MAAMT,aAAa,CAAC,CAAC;EACrC,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGf,OAAO,aAAaY,MAAM,EAAE,EAAE;IAC5DC;EACF,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,0BAA0B,CAAC;EAC5D;EAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAOR,MAAM,EAAES,IAAI,KAAK;EACjD,MAAMR,OAAO,GAAG,MAAMT,aAAa,CAAC,CAAC;EACrC,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGf,OAAO,aAAaY,MAAM,EAAE,EAAE;IAC5DU,MAAM,EAAE,MAAM;IACdT,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGA;IACL,CAAC;IACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEJ;IAAK,CAAC;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACP,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,wBAAwB,CAAC;EAC1D;EAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}